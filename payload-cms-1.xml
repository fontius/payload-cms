This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  collections/
    Posts.ts
    Users.ts
  payload.config.ts
  server.ts
.dockerignore
.env.example
.gitignore
Dockerfile
nodemon.json
package.json
payload-cms.xml
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/collections/Posts.ts">
import { CollectionConfig } from 'payload/types';

const Posts: CollectionConfig = {
  slug: 'posts',
  admin: {
    useAsTitle: 'title',
  },
  access: {
    read: () => true, // Everyone can read Posts
  },
  fields: [
    {
      name: 'title',
      type: 'text',
      required: true,
    },
    {
      name: 'content',
      type: 'richText',
    },
    {
      name: 'author',
      type: 'relationship',
      relationTo: 'users',
    },
  ],
};

export default Posts;
</file>

<file path=".dockerignore">
node_modules
npm-debug.log
Dockerfile
.dockerignore
.git
.gitignore
dist
build
.env
</file>

<file path=".env.example">
# --- Payload CMS Environment Variables ---

# This secret is used to sign and encrypt JWTs and other sensitive data.
# Generate a secure, random string (e.g., `openssl rand -base64 32`) and keep it secret.
PAYLOAD_SECRET=

# The public-facing URL of THIS Payload instance.
# Staging Example: https://cms-stage.your-domain.com
# Production Example: https://cms.your-domain.com
PAYLOAD_PUBLIC_SERVER_URL=http://localhost:3000

# The full connection string for your MongoDB instance.
# Coolify provides this automatically if you use a Coolify-hosted MongoDB.
# Staging Example: mongodb://... (internal or external URI for staging DB)
# Production Example: mongodb://... (URI for production DB)
DATABASE_URI=

# The public-facing URL of your FRONTEND Next.js application.
# This is required for CORS and CSRF protection.
# Staging Example: https://web-stage.your-domain.com
# Production Example: https://web.your-domain.com
FRONTEND_URL=http://localhost:3001
</file>

<file path="Dockerfile">
# 1. Base image with full dependencies for building
FROM node:18-alpine AS base
WORKDIR /app
# Install dependencies first for better caching
COPY package.json package-lock.json* ./
RUN npm install

# 2. Builder stage
FROM base AS builder
WORKDIR /app
COPY . .
# This script compiles TS and builds the Payload admin panel
RUN npm run build

# 3. Production image
FROM node:18-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production

# Copy production dependencies from the 'base' stage
COPY --from=base /app/node_modules ./node_modules
COPY --from=base /app/package.json ./package.json

# Copy built application artifacts from the 'builder' stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/build ./build

EXPOSE 3000

CMD ["npm", "run", "serve"]
</file>

<file path="payload-cms.xml">
This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
src/
  collections/
    Posts.ts
    Users.ts
  payload.config.ts
  server.ts
.dockerignore
.gitignore
Dockerfile
nodemon.json
package.json
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/collections/Posts.ts">
import { CollectionConfig } from 'payload/types';

const Posts: CollectionConfig = {
  slug: 'posts',
  admin: {
    useAsTitle: 'title',
  },
  access: {
    read: () => true, // Everyone can read Posts
  },
  fields: [
    {
      name: 'title',
      type: 'text',
      required: true,
    },
    {
      name: 'content',
      type: 'richText',
    },
    {
      name: 'author',
      type: 'relationship',
      relationTo: 'users',
    },
  ],
};

export default Posts;
</file>

<file path=".dockerignore">
node_modules
npm-debug.log
Dockerfile
.dockerignore
.git
.gitignore
dist
build
.env
</file>

<file path="Dockerfile">
# 1. Base image with full dependencies for building
FROM node:18-alpine AS base
WORKDIR /app
# Install dependencies first for better caching
COPY package.json package-lock.json* ./
RUN npm install

# 2. Builder stage
FROM base AS builder
WORKDIR /app
COPY . .
# This script compiles TS and builds the Payload admin panel
RUN npm run build

# 3. Production image
FROM node:18-alpine AS runner
WORKDIR /app

ENV NODE_ENV=production

# Copy production dependencies from the 'base' stage
COPY --from=base /app/node_modules ./node_modules
COPY --from=base /app/package.json ./package.json

# Copy built application artifacts from the 'builder' stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/build ./build

EXPOSE 3000

CMD ["npm", "run", "serve"]
</file>

<file path="src/collections/Users.ts">
import { CollectionConfig } from 'payload/types';

const Users: CollectionConfig = {
  slug: 'users',
  auth: true,
  admin: {
    useAsTitle: 'email',
  },
  fields: [
    // Email is added by default
  ],
};

export default Users;
</file>

<file path="src/payload.config.ts">
import { buildConfig } from 'payload/config';
import path from 'path';
import { mongooseAdapter } from '@payloadcms/db-mongodb';
import { slateEditor } from '@payloadcms/richtext-slate';
import { webpackBundler } from '@payloadcms/bundler-webpack';

import Users from './collections/Users';
import Posts from './collections/Posts';

export default buildConfig({
  serverURL: process.env.PAYLOAD_PUBLIC_SERVER_URL || 'http://localhost:3000',
  admin: {
    user: Users.slug,
    bundler: webpackBundler(),
  },
  editor: slateEditor({}),
  collections: [
    Users,
    Posts,
  ],
  typescript: {
    outputFile: path.resolve(__dirname, 'payload-types.ts'),
  },
  graphQL: {
    schemaOutputFile: path.resolve(__dirname, 'generated-schema.graphql'),
  },
  db: mongooseAdapter({
    url: process.env.DATABASE_URI,
  }),
  // Whitelist your frontend URL to make requests to the CMS
  cors: [
    process.env.FRONTEND_URL,
    // Add other domains as needed
  ].filter(Boolean),
  csrf: [
    process.env.FRONTEND_URL,
    // Add other domains as needed
  ].filter(Boolean),
});
</file>

<file path="src/server.ts">
import express from 'express';
import payload from 'payload';
import dotenv from 'dotenv';
import path from 'path';

dotenv.config({
  path: path.resolve(__dirname, '../.env'),
});

const app = express();

// Redirect root to Admin panel
app.get('/', (_, res) => {
  res.redirect('/admin');
});

const start = async () => {
  // Initialize Payload
  await payload.init({
    secret: process.env.PAYLOAD_SECRET,
    express: app,
    onInit: async () => {
      payload.logger.info(`Payload Admin URL: ${payload.getAdminURL()}`);
    },
  });

  app.listen(process.env.PORT || 3000);
};

start();
</file>

<file path=".gitignore">
# Node & dependencies
node_modules/
package-lock.json
yarn.lock

# TypeScript build artifacts
dist/
*.tsbuildinfo

# Payload/Next.js output & caches
.next/
out/
payloadbuild/  # adjust if you have payload build output

# Env files
.env
.env.*.local

# IDEs & editor settings
.vscode/
.idea/
*.code-workspace

# OS metadata
.DS_Store
Thumbs.db

# Logs
logs/
*.log
npm-debug.log*

# Misc
coverage/
.cache/
</file>

<file path="nodemon.json">
{
  "watch": ["src"],
  "ext": "ts,json",
  "ignore": ["src/**/*.spec.ts"],
  "exec": "ts-node ./src/server.ts"
}
</file>

<file path="package.json">
{
  "name": "payload-cms",
  "version": "1.0.0",
  "description": "",
  "main": "dist/server.js",
  "scripts": {
    "dev": "cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts nodemon",
    "build": "cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts payload build",
    "serve": "cross-env PAYLOAD_CONFIG_PATH=dist/payload.config.js NODE_ENV=production node dist/server.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@payloadcms/bundler-webpack": "^1.0.7",
    "@payloadcms/db-mongodb": "^3.44.0",
    "@payloadcms/richtext-slate": "^3.44.0",
    "dotenv": "^17.0.0",
    "express": "^5.1.0",
    "payload": "^3.44.0"
  },
  "devDependencies": {
    "@types/express": "^5.0.3",
    "cross-env": "^7.0.3",
    "nodemon": "^3.1.10",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3"
  }
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es6",
    "module": "commonjs",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "./dist",
    "rootDir": "./src",
    "noImplicitAny": false
  },
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
</file>

</files>
</file>

<file path="src/collections/Users.ts">
import { CollectionConfig } from 'payload/types';

const Users: CollectionConfig = {
  slug: 'users',
  auth: true,
  admin: {
    useAsTitle: 'email',
  },
  fields: [
    {
      name: 'role',
      type: 'select',
      options: [
        { label: 'Admin', value: 'admin' },
        { label: 'Editor', value: 'editor' },
      ],
      required: true,
      defaultValue: 'editor',
      admin: {
        position: 'sidebar',
      },
    },
  ],
};

export default Users;
</file>

<file path="src/payload.config.ts">
import { buildConfig } from 'payload/config';
import path from 'path';
import { fileURLToPath } from 'url'; // Added for ESM __dirname
import { mongooseAdapter } from '@payloadcms/db-mongodb';
import { slateEditor } from '@payloadcms/richtext-slate';
import { viteBundler } from '@payloadcms/bundler-vite';

import Users from './collections/Users.js'; // Added .js extension
import Posts from './collections/Posts.js'; // Added .js extension

// Recreate __dirname for ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export default buildConfig({
  serverURL: process.env.PAYLOAD_PUBLIC_SERVER_URL || 'http://localhost:3000',
  admin: {
    user: Users.slug,
    bundler: viteBundler(),
  },
  editor: slateEditor({}),
  collections: [
    Users,
    Posts,
  ],
  typescript: {
    outputFile: path.resolve(__dirname, 'payload-types.ts'),
  },
  graphQL: {
    schemaOutputFile: path.resolve(__dirname, 'generated-schema.graphql'),
  },
  db: mongooseAdapter({
    url: process.env.DATABASE_URI,
  }),
  // Whitelist your frontend URL to make requests from the browser
  cors: [process.env.FRONTEND_URL, process.env.PAYLOAD_PUBLIC_SERVER_URL]
    .filter(Boolean)
    .concat(['http://localhost:3001']), // Allow local Next.js dev
  csrf: [process.env.FRONTEND_URL, process.env.PAYLOAD_PUBLIC_SERVER_URL]
    .filter(Boolean)
    .concat(['http://localhost:3001']), // Allow local Next.js dev
});
</file>

<file path="src/server.ts">
import express from 'express';
import payload from 'payload';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url'; // Added for ESM __dirname

// Recreate __dirname for ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

dotenv.config({
  path: path.resolve(__dirname, '../.env'),
});

const app = express();

// Redirect root to Admin panel
app.get('/', (_, res) => {
  res.redirect('/admin');
});

const start = async () => {
  // Abort startup if critical environment variables are missing
  if (!process.env.PAYLOAD_SECRET) {
    throw new Error('PAYLOAD_SECRET environment variable is missing');
  }
  if (!process.env.DATABASE_URI) {
    throw new Error('DATABASE_URI environment variable is missing');
  }

  // Initialize Payload
  await payload.init({
    secret: process.env.PAYLOAD_SECRET,
    express: app,
    onInit: async () => {
      payload.logger.info(`Payload Admin URL: ${payload.getAdminURL()}`);
    },
  });

  app.listen(process.env.PORT || 3000);
};

start();
</file>

<file path=".gitignore">
# Node & dependencies
node_modules/
package-lock.json
yarn.lock

# TypeScript build artifacts
dist/
build/
*.tsbuildinfo

# Payload/Next.js output & caches
.next/
out/
payload-types.ts
.payload/

# Env files
.env
.env.*.local

# IDEs & editor settings
.vscode/
.idea/
*.code-workspace

# OS metadata
.DS_Store
Thumbs.db

# Logs
logs/
*.log
npm-debug.log*

# Misc
coverage/
.cache/
</file>

<file path="nodemon.json">
{
  "watch": ["src"],
  "ext": "ts,json",
  "ignore": ["src/**/*.spec.ts"],
  "exec": "node --loader ts-node/esm ./src/server.ts"
}
</file>

<file path="package.json">
{
  "name": "payload-cms",
  "version": "1.0.0",
  "description": "",
  "main": "dist/server.js",
  "type": "module",
  "scripts": {
    "dev": "cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts nodemon",
    "build": "npm run copyfiles && tsc && cross-env PAYLOAD_CONFIG_PATH=dist/payload.config.js payload build",
    "serve": "cross-env PAYLOAD_CONFIG_PATH=dist/payload.config.js NODE_ENV=production node dist/server.js",
    "copyfiles": "copyfiles -u 1 \"src/**/*.{json,css,scss,ttf,woff,woff2,eot,svg,jpg,png}\" dist/",
    "generate:types": "cross-env PAYLOAD_CONFIG_PATH=src/payload.config.ts payload generate:types",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@payloadcms/bundler-vite": "^1.1.2",
    "@payloadcms/db-mongodb": "^3.0.0",
    "@payloadcms/richtext-slate": "^3.0.0",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "payload": "^3.0.0",
    "react": "^19.0.0-rc-f994737d14-20240522",
    "react-dom": "^19.0.0-rc-f994737d14-20240522"
  },
  "devDependencies": {
    "@types/express": "^4.17.21",
    "cross-env": "^7.0.3",
    "copyfiles": "^2.4.1",
    "nodemon": "^3.1.10",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3"
  }
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "esnext",
    "module": "nodenext",
    "moduleResolution": "nodenext",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "./dist",
    "rootDir": "./src"
  },
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
</file>

</files>
